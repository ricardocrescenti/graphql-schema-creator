import * as Knex from "knex";
import { GraphQLSchema } from "..";
import { Column } from "./column";
import { ResolverRequest } from "./resolver-request";
import { UniqueKey } from "./unique-key";
export declare type EventExecution<E> = (event: E) => void;
export declare type EventFunction<S, R> = (sender: S) => R;
export declare type EventArgFunction<S, A, R> = (sender: S, arg: A) => R;
export declare class Table {
    schema: GraphQLSchema;
    tableSchema: string;
    tableName: string;
    typeName: string;
    selectFields: any[];
    defaultQuery: Knex.QueryBuilder;
    columns: any;
    primaryKeys: Column[];
    uniqueKeys: UniqueKey[];
    ordination: string[];
    queries: any;
    mutations: any;
    beforeInsert: Array<EventFunction<ResolverRequest, void>>;
    afterInsert: Array<EventArgFunction<ResolverRequest, any, void>>;
    beforeUpdate: Array<EventArgFunction<ResolverRequest, any, void>>;
    afterUpdate: Array<EventArgFunction<ResolverRequest, any, void>>;
    beforeDelete: Array<EventArgFunction<ResolverRequest, any, void>>;
    afterDelete: Array<EventArgFunction<ResolverRequest, any, void>>;
    constructor(schema: GraphQLSchema, tableSchema: string, tableName: string, typeName: string, tableColumns: any[], uniqueKeys: any[]);
    getColumnsTypeDefs(forInputType: boolean): string;
    getResolversTypeDefs(resolvers: any): string;
    createDefaultQuery(db: Knex, trx?: Knex.Transaction, where?: any): Knex.QueryBuilder;
    createWhereJson(values: any, columns?: Column[]): any;
    processMutation(schema: GraphQLSchema, request: ResolverRequest, where: any): Promise<any>;
    processDelete(schema: GraphQLSchema, request: ResolverRequest): Promise<any>;
    private createDefaultInsert;
    private createDefaultUpdate;
    private processForeignKeyMutation;
    private processChildsForeignKeyMutation;
    private processTableEvents;
}
